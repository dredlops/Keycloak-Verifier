/*
Keycloak Verifier. Plugin to search for vulnerabilities in Keycloak.
Copyright (C) 2023 Andre Sousa

This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this program. If not, see https://www.gnu.org/licenses/.
*/

package org.example;

import org.json.JSONObject;

import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Arrays;
import java.util.Iterator;

public class vulnerabilityGeneral {

    private getRequest tok;
    private Response resp;
    private static getVulnerabilityInRecords gtv;

    public boolean vulnerabilityGeneral(String cve) throws IOException {
        gtv = new getVulnerabilityInRecords();
        tok = new getRequest();
        resp= new Response();
        String token = tok.getToken();
        String host = tok.getHost();
        URL url = new URL(host+gtv.getValueOf(cve, "url"));
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("GET");
        conn.setRequestProperty("Authorization", "Bearer " + token);

        conn.setRequestProperty("Accept","*/*");

        return isActive( resp.getResponse(conn), cve);
    }


    private boolean isActive(String response, String cve){
        JSONObject resp = new JSONObject(response);
        String [] vars = gtv.getVariable(cve);
        Iterator it = Arrays.stream(vars).iterator();
        while(it.hasNext()){
            if(resp.get(it.next().toString()).equals("true"))
                return true;
        }
        return false;
    }
}
