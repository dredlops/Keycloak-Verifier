/*
Keycloak Verifier. Plugin to search for vulnerabilities in Keycloak.
Copyright (C) 2023 Andre Sousa

This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this program. If not, see https://www.gnu.org/licenses/.
*/

package org.example;

import org.json.JSONArray;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Iterator;

public class getVulnerabilityInRecords {
    private static final String FILE = "vulnerabilities.log";

    private static JSONArray vulnerabilities;

    public getVulnerabilityInRecords() throws IOException {
        vulnerabilities=new JSONArray();
        String current="";
        BufferedReader buff = new BufferedReader(new FileReader(FILE));
        while( (current = buff.readLine()) != null ) {
            vulnerabilities.put(new JSONObject(current));
        }
    }

    public JSONObject getVulnerability(String cve){
        Iterator it= vulnerabilities.iterator();
        JSONObject object;
        while (it.hasNext()){
            object=(JSONObject) it.next();
            if(object.get("cve").equals(cve))
                return object;
        }
        return null;
    }

    public String[] get(String key) {
        String[] response = new String[vulnerabilities.length()];
        int counter=0;
        Iterator it= vulnerabilities.iterator();
        JSONObject object;
        while (it.hasNext()){
            object=(JSONObject) it.next();
            response[counter++]=object.get(key).toString();
        }
        return response;
    }

    /*
    Verifies if a CVE as a verification to be done, by checking "url" parameter on the log file
     */
    public boolean hasVerificationAvailable(String cve){
        Iterator it = vulnerabilities.iterator();
        JSONObject object;
        while (it.hasNext()){
            object=(JSONObject) it.next();
            if(object.get("cve").toString().equals(cve)){
                if(!object.get("url").toString().equals(""))
                    return true;
            }
        }
        return false;
    }

    /*
    Returns the value of a given key for a given CVE
     */
    public String getValueOf(String cve, String key){
        Iterator it = vulnerabilities.iterator();
        JSONObject object;
        while (it.hasNext()){
            object=(JSONObject) it.next();
            if(object.get("cve").toString().equals(cve)){
                return object.get(key).toString();
            }
        }
        return null;
    }

    public String[] getVariable(String cve){
        Iterator it = vulnerabilities.iterator();
        JSONObject object;
        while (it.hasNext()){
            object=(JSONObject) it.next();
            if(object.get("cve").toString().equals(cve)){
                return (String[]) object.get("variable");
            }
        }
        return null;
    }

    public JSONArray getAllVulnerabilities(){
        return vulnerabilities;
    }
}
